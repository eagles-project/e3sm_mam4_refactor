#!/bin/sh

#===========#===========#===========#===========#===========#===========#===========#===========
# USAGE:
# 1. Go to the root of the E3SM codebase (i.e., e3sm_mam4_refactor directory)
# 2. Issue command:
#           $bash  mam4_refactor_scripts/setup_baselines_and_comparison.sh -t <tag>

# 3. The command above will launch two separate builds of the E3SM (baseline generation and comparison)
#    The tags for the baseline and comparison run will be auto-generated by appending "base_" and "comp_"
#    respectively
#===========#===========#===========#===========#===========#===========#===========#===========

main() {


    #-------------------
    #user input starts
    #-------------------

    #--------------------------------------
    #Less frequently changed user input
    #--------------------------------------

    #compiler
    compiler="intel"

    #scratch directory path
    scratch_dir="/compyfs/sing201/e3sm_scratch"

    #baseline directory path
    baseline_dir="/compyfs/e3sm_baselines/$compiler"

    test_name="SMS_D_Ln5_P32x1"
    grid="ne4_oQU240"
    compset="F2010"
    project="esmd"

    #test_id for the test is obtained from the command line arg

    #baseline test_id (must be different from the test_id above; you can simply add "base_" infront of test_id if you like)
    baseline_test_id="base_"$test_id

    #Test_Id for the comparison simulation(must be different from the test_ids above; you can simply add "comp_" infront of test_id if you like)
    comparison_test_id="comp_"$test_id


    #----------------------------------------
    #user input ends
    #----------------------------------------

    #======#======#======#======#======#======#======#======#======#======#======#======#======#======#======#======#======

    #create directory names
    test_dir="$test_name.$grid.$compset.compy_$compiler" #test dir (common name)
    generate_dir="$scratch_dir/$test_dir.G.$test_id"
    comparison_dir="$scratch_dir/$test_dir.C.$comparison_test_id"

    #if any of the generate or comparison directories already exist, exit
    if_dir_exists_then_exit $generate_dir "Generate baseline"
    if_dir_exists_then_exit $comparison_dir "Comparison baseline"


    script_name="create_test" #test script name
    status_file="TestStatus" #status file to check test status

    #----- Start running tests ---------

    #create_test script exists in cime/scripts directory, cd into that directory
    cd cime/scripts

    #check if we are in the right directory and the script exists
    if [ ! -f $script_name ]; then
        echo "$script_name does not exist. Have you initialized submodules? "
        echo "Current directory is:" `pwd`
        exit -1 #exit if it is wrong directory or file doesn't exist
    fi

    newline && time_elapsed_min

    #run baseline test
    echo 'Generating baselines...'
    ./$script_name $test_name.$grid.$compset --compiler $compiler -t $test_id -g -b $baseline_test_id -p $project -o > /dev/null &

    #wait for basline dir to be generated
    echo 'Wait till the baseline directory is generated ...'
    while [ ! -d $baseline_dir/$baseline_test_id/$test_name.$grid.$compset.compy_$compiler ]
    do
        echo -n '.'
        sleep 2
    done

    newline && time_elapsed_min

    #Launch the comparison simulation but DO NOT submit it
    echo 'Compare baselines build starts...'
    ./$script_name $test_name.$grid.$compset --compiler $compiler -t $comparison_test_id -c \
        -b $baseline_test_id -p $project --no-run > /dev/null &

    newline && time_elapsed_min
    echo '-------------------------------------------------------------------'
    echo "Generate baseline directory is: $generate_dir"
    echo "Comparison directory is: $comparison_dir"
    echo '-------------------------------------------------------------------'

    newline && time_elapsed_min
    #Find out if the baseline run is complete:
    echo 'Check if generate baseline directory is there ....'
    while [ ! -d $generate_dir ]
    do
        echo -n '.'
        sleep 2
    done

    #cd into generate baseline directory
    cd $generate_dir

    baseline_generated=0
    baseline_failed=0
    newline && time_elapsed_min
    #loop until baseline_generated variable catched "GENERATE" and "PASS" in the $status file
    echo "Checking for $status_file and baselines..."
    while [ $baseline_generated -eq 0 ]
    do
        #see if TestStatus file exists
        if [ ! -f "$status_file" ]; then
            echo -n '.'
            sleep 2
            continue
        fi
        baseline_failed=`cat $status_file |grep FAIL |wc -l`
        if [ $baseline_failed != 0 ]; then
            newline
            echo 'Baseline Generation FAILED; exiting...'
            echo "Generate baseline directory is: $generate_dir"
            newline
            exit -1
        fi
        baseline_generated=`cat $status_file |grep GENERATE |grep PASS|wc -l`
        sleep 15
        echo -n '.'
    done

    newline && time_elapsed_min

    echo 'Baselines have been generated, submiting comparison run..'

    cd $compare_dir

    ./case.submit > /dev/null #submit run

    echo 'Comparison run should be in queue...'

    newline && time_elapsed_min

    echo '-------------------------------------------------------------------'
    echo "Comparison directory is: $comparison_dir"
    echo '-------------------------------------------------------------------'

    newline && time_elapsed_min
}

#---------------------
# Function Definitions
#---------------------

#Generate a newline
newline () { echo ''; }

#Print time
#print_time() { echo -n "Time elapsed:" && date +%T ; }
#Time elapsed in minutes
time_elapsed_min() {
    endtime=$(date +%s)
    total_time=$(( $endtime - $starttime ))
    minutes=$((total_time / 60))
    seconds=$((total_time % 60))
    echo "Time elapsed (min): " $minutes:$seconds
}

#if directory exists, we cannot proceed
if_dir_exists_then_exit () {
    if [ -d $1 ]; then
        echo "$2 directory at: $1 already exists. Please remove it to proceed"
        exit -1
    fi
}

#parse command line args
while getopts ":t:" opt; do
  case $opt in
    t) test_id="$OPTARG"
    ;;
    \?) echo "Invalid option -$OPTARG; please set test_id using -t command line option" >&2
    exit 1
    ;;
  esac

  case $OPTARG in
    -*) echo "Option $opt needs a valid argument"
    exit 1
    ;;
  esac
done

if [ -z "${test_id}" ]; then
    echo "test_id is not set, please set it using -t command line option"
    exit 1
fi

#capture start time to compute time elapsed in minutes
starttime=$(date +%s)
echo 'Start Time:' $(date +%T)
#call the main function
main
