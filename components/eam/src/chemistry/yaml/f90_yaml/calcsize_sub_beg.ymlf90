
  integer  :: kprint, unit_input, unit_output, ispec, print_time_step
  real(r8) :: fldcw_wrt(pcnst)
  real(r8), pointer :: tmp_arr(:,:)           !specie mmr (cloud borne)

  ! YAML file input generation code- DO NOT PORT to C++
  !print all inputs one-by-one at column "i"
  icol = icolprnt(state%lchnk) !column to write data
  kprint = 50
  if(icol > 0 .and. one_print_ts(print_time_step)) then ! if this column exists in lchnk
     !open I/O yaml files
     call open_files('calcsz_sub', &  !intent-in
          unit_input, unit_output) !intent-out

     !start by adding an input string
     call write_input_output_header(unit_input, unit_output,state%lchnk,icol,'compute_tendencies',deltat)

     !start writing data
     call write_aerosol_mmr(unit_input, unit_output,'interstitial',state%q(icol,kprint,:))
     call write_aerosol_mmr(unit_input, unit_output,'interstitial_num',state%q(icol,kprint,:),.true.)

     !fldcw_wrt array will carry species at icol and kprint, initialize it with huge values
     fldcw_wrt(:) = huge(fldcw_wrt)
     do ispec = 16, pcnst !ensure that the loop starts from 16, as aerosols starts at 16th index
        tmp_arr => qqcw_get_field(pbuf,ispec,state%lchnk)
        fldcw_wrt(ispec) = tmp_arr(icol,kprint)
     enddo
     call write_aerosol_mmr(unit_input, unit_output,'cloud_borne',fldcw_wrt)
     call write_aerosol_mmr(unit_input, unit_output,'cloud_borne_num',fldcw_wrt,.true.)

     close(unit_input)
     call freeunit(unit_input)
  endif
