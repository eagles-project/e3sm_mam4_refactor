#ifdef YAML_CALC
  type(yaml_vars) :: yaml
  integer,save  :: print_time_step=0
  logical  :: firstcall
  integer  :: unit_input, unit_output, ispec, nstep
  real(r8) :: fldcw_wrt(40)
  real(r8), pointer :: tmp_arr(:,:)           !specie mmr (cloud borne)


  yaml%lev_print = 68 !level
  yaml%nstep_print = 379 !time step

  !YAML file input generation code- DO NOT PORT to C++
  !print all inputs one-by-one at column "yaml%col_print"
  yaml%col_print = icolprnt(state%lchnk) !column to write data

  firstcall = one_print_ts(print_time_step,.true.) !Is it the first call for this time step
  nstep = get_nstep() !time step

  yaml%flag_print = .false.
  if(yaml%col_print > 0 .and. nstep==yaml%nstep_print .and. firstcall) then ! if this column exists in lchnk
     yaml%lchnk_print=state%lchnk
     yaml%flag_print = .true.
     !open I/O yaml files
     call open_files('calcsize_sub', &  !intent-in
          unit_input, unit_output) !intent-out

     !start by adding an input string
     call write_input_output_header(unit_input, unit_output,state%lchnk,yaml%col_print,'compute_tendencies',nstep, yaml%lev_print, deltat)

     !start writing data
     call write_aerosol_mmr(unit_input, unit_output,'interstitial',state%q(yaml%col_print,yaml%lev_print,:))
     call write_aerosol_mmr(unit_input, unit_output,'interstitial_num',&
          state%q(yaml%col_print,yaml%lev_print,:),.true.)! last arg .ture. for printing aerosol numbers only  

     !fldcw_wrt array will carry species at yaml%col_print and yaml%lev_print, initialize it with huge values
     fldcw_wrt(:) = huge(fldcw_wrt)
     do ispec = 16, 40 !ensure that the loop starts from 16, as aerosols starts at 16th index
        tmp_arr => qqcw_get_field(pbuf,ispec,state%lchnk)
        fldcw_wrt(ispec) = tmp_arr(yaml%col_print,yaml%lev_print)
     enddo
     call write_aerosol_mmr(unit_input, unit_output,'cloud_borne',fldcw_wrt)
     call write_aerosol_mmr(unit_input, unit_output,'cloud_borne_num',fldcw_wrt,.true.)! last arg .ture. for printing aerosol numbers only

     close(unit_input)
     call freeunit(unit_input)
  endif
#endif

  !Following code was used to find out best grid cells for output:
  !integer ibcol, kb, icnt
  !real(r8) :: fldcw_b(25)

  !if (update_mmr) then
  !   do kb  = 1, pver
  !      do ibcol = 1, ncol
  !         icnt = 0
  !         do ispec = 16, pcnst !ensure that the loop starts from 16, as aerosols starts at 16th index
  !            if (dqqcwdt(ibcol,kb,ispec)>1.e-20_r8) icnt = icnt + 1
  !         enddo
  !
  !         if (icnt>5) then
  !            do ispec = 16, pcnst !ensure that the loop starts from 16, as aerosols starts at 16th index
  !               write(102,*)dqqcwdt(ibcol,kb,ispec)
  !            enddo
  !            write(102,*)'Lat, Lon:', get_rlat_p(lchnk, ibcol)*57.296_r8, get_rlon_p(lchnk, ibcol)*57.296_r8, kb,get_nstep()
  !            write(102,*)'minq:', minval(dqdt(ibcol,kb,16:40))
  !            write(102,*)'maxq:',maxval(dqdt(ibcol,kb,16:40))
  !            write(102,*)'avgq:',sum(abs(dqdt(ibcol,kb,16:40)))/size(dqdt(ibcol,kb,16:40))
  !            write(102,*)'minc:', minval(dqqcwdt(ibcol,kb,16:40))
  !            write(102,*)'maxc:', maxval(dqqcwdt(ibcol,kb,16:40))
  !            write(102,*)'avgc:',sum(abs(dqqcwdt(ibcol,kb,16:40)))/size(dqqcwdt(ibcol,kb,16:40))
  !         endif
  !      enddo
  !   enddo
  !endif
